{"version":3,"sources":["../react_components/PaginationBoxView.js"],"names":["PaginationBoxView","props","handlePreviousPage","selected","state","evt","preventDefault","returnValue","handlePageSelected","callCallback","onPageChange","selectedItem","pagination","items","pageRangeDisplayed","pageCount","marginPagesDisplayed","breakLabel","breakClassName","breakLinkClassName","index","push","getPageElement","leftSide","rightSide","page","breakView","createPageView","length","hrefBuilder","getForwardJump","getBackwardJump","asBuilder","initialSelected","initialPage","forcePage","disableInitialCallback","extraAriaContext","console","warn","prevProps","setState","forwardJump","backwardJump","pageIndex","ariaLabelBuilder","label","pageClassName","pageLinkClassName","activeClassName","activeLinkClassName","disabledClassName","previousClassName","nextClassName","containerClassName","previousLinkClassName","previousLabel","nextLinkClassName","nextLabel","isPreviousDisabled","isNextDisabled","previousClasses","nextClasses","previousAriaDisabled","nextAriaDisabled","prevHref","prevAs","nextHref","nextAs","Component","propTypes","PropTypes","number","isRequired","node","oneOfType","string","func","bool","defaultProps"],"mappings":"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","file":"PaginationBoxView.js","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PageView from './PageView';\nimport BreakView from './BreakView';\nimport Link from 'next/link';\n\nexport default class PaginationBoxView extends Component {\n  static propTypes = {\n    pageCount: PropTypes.number.isRequired,\n    pageRangeDisplayed: PropTypes.number.isRequired,\n    marginPagesDisplayed: PropTypes.number.isRequired,\n    previousLabel: PropTypes.node,\n    nextLabel: PropTypes.node,\n    breakLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    asBuilder: PropTypes.func,\n    hrefBuilder: PropTypes.func,\n    onPageChange: PropTypes.func,\n    initialPage: PropTypes.number,\n    forcePage: PropTypes.number,\n    disableInitialCallback: PropTypes.bool,\n    containerClassName: PropTypes.string,\n    pageClassName: PropTypes.string,\n    pageLinkClassName: PropTypes.string,\n    activeClassName: PropTypes.string,\n    activeLinkClassName: PropTypes.string,\n    previousClassName: PropTypes.string,\n    nextClassName: PropTypes.string,\n    previousLinkClassName: PropTypes.string,\n    nextLinkClassName: PropTypes.string,\n    disabledClassName: PropTypes.string,\n    breakClassName: PropTypes.string,\n    breakLinkClassName: PropTypes.string,\n    extraAriaContext: PropTypes.string,\n    ariaLabelBuilder: PropTypes.func,\n  };\n\n  static defaultProps = {\n    pageCount: 10,\n    pageRangeDisplayed: 2,\n    marginPagesDisplayed: 3,\n    activeClassName: 'selected',\n    previousClassName: 'previous',\n    nextClassName: 'next',\n    previousLabel: 'Previous',\n    nextLabel: 'Next',\n    breakLabel: '...',\n    disabledClassName: 'disabled',\n    disableInitialCallback: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    let initialSelected;\n    if (props.initialPage) {\n      initialSelected = props.initialPage;\n    } else if (props.forcePage) {\n      initialSelected = props.forcePage;\n    } else {\n      initialSelected = 0;\n    }\n\n    this.state = {\n      selected: initialSelected,\n    };\n  }\n\n  componentDidMount() {\n    const {\n      initialPage,\n      disableInitialCallback,\n      extraAriaContext,\n    } = this.props;\n    // Call the callback with the initialPage item:\n    if (typeof initialPage !== 'undefined' && !disableInitialCallback) {\n      this.callCallback(initialPage);\n    }\n\n    if (extraAriaContext) {\n      console.warn(\n        'DEPRECATED (react-paginate): The extraAriaContext prop is deprecated. You should now use the ariaLabelBuilder instead.'\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      typeof this.props.forcePage !== 'undefined' &&\n      this.props.forcePage !== prevProps.forcePage\n    ) {\n      this.setState({ selected: this.props.forcePage });\n    }\n  }\n\n  handlePreviousPage = evt => {\n    const { selected } = this.state;\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected > 0) {\n      this.handlePageSelected(selected - 1, evt);\n    }\n  };\n\n  getForwardJump() {\n    const { selected } = this.state;\n    const { pageCount, pageRangeDisplayed } = this.props;\n\n    const forwardJump = selected + pageRangeDisplayed;\n    return forwardJump >= pageCount ? pageCount - 1 : forwardJump;\n  }\n\n  getBackwardJump() {\n    const { selected } = this.state;\n    const { pageRangeDisplayed } = this.props;\n\n    const backwardJump = selected - pageRangeDisplayed;\n    return backwardJump < 0 ? 0 : backwardJump;\n  }\n\n  asBuilder(pageIndex) {\n    const { asBuilder, pageCount } = this.props;\n    if (\n      asBuilder &&\n      pageIndex !== this.state.selected &&\n      pageIndex >= 0 &&\n      pageIndex < pageCount\n    ) {\n      return asBuilder(pageIndex + 1);\n    }\n    return '';\n  }\n  hrefBuilder(pageIndex) {\n    const { hrefBuilder, pageCount } = this.props;\n    if (\n      hrefBuilder &&\n      pageIndex !== this.state.selected &&\n      pageIndex >= 0 &&\n      pageIndex < pageCount\n    ) {\n      return hrefBuilder(pageIndex + 1);\n    }\n    return '';\n  }\n\n  ariaLabelBuilder(pageIndex) {\n    const selected = pageIndex === this.state.selected;\n    if (\n      this.props.ariaLabelBuilder &&\n      pageIndex >= 0 &&\n      pageIndex < this.props.pageCount\n    ) {\n      let label = this.props.ariaLabelBuilder(pageIndex + 1, selected);\n      // DEPRECATED: The extraAriaContext prop was used to add additional context\n      // to the aria-label. Users should now use the ariaLabelBuilder instead.\n      if (this.props.extraAriaContext && !selected) {\n        label = label + ' ' + this.props.extraAriaContext;\n      }\n      return label;\n    }\n  }\n\n  callCallback = selectedItem => {\n    if (\n      typeof this.props.onPageChange !== 'undefined' &&\n      typeof this.props.onPageChange === 'function'\n    ) {\n      this.props.onPageChange({ selected: selectedItem });\n    }\n  };\n\n  getPageElement(index) {\n    const { selected } = this.state;\n    const {\n      pageClassName,\n      pageLinkClassName,\n      activeClassName,\n      activeLinkClassName,\n      extraAriaContext,\n    } = this.props;\n\n    return (\n      <PageView\n        key={index}\n        selected={selected === index}\n        pageClassName={pageClassName}\n        pageLinkClassName={pageLinkClassName}\n        activeClassName={activeClassName}\n        activeLinkClassName={activeLinkClassName}\n        extraAriaContext={extraAriaContext}\n        href={this.hrefBuilder(index)}\n        as={this.asBuilder(index)}\n        ariaLabel={this.ariaLabelBuilder(index)}\n        page={index + 1}\n      />\n    );\n  }\n\n  pagination = () => {\n    const items = [];\n    const {\n      pageRangeDisplayed,\n      pageCount,\n      marginPagesDisplayed,\n      breakLabel,\n      breakClassName,\n      breakLinkClassName,\n    } = this.props;\n\n    const { selected } = this.state;\n\n    if (pageCount <= pageRangeDisplayed) {\n      for (let index = 0; index < pageCount; index++) {\n        items.push(this.getPageElement(index));\n      }\n    } else {\n      let leftSide = pageRangeDisplayed / 2;\n      let rightSide = pageRangeDisplayed - leftSide;\n\n      // If the selected page index is on the default right side of the pagination,\n      // we consider that the new right side is made up of it (= only one break element).\n      // If the selected page index is on the default left side of the pagination,\n      // we consider that the new left side is made up of it (= only one break element).\n      if (selected > pageCount - pageRangeDisplayed / 2) {\n        rightSide = pageCount - selected;\n        leftSide = pageRangeDisplayed - rightSide;\n      } else if (selected < pageRangeDisplayed / 2) {\n        leftSide = selected;\n        rightSide = pageRangeDisplayed - leftSide;\n      }\n\n      let index;\n      let page;\n      let breakView;\n      let createPageView = index => this.getPageElement(index);\n\n      for (index = 0; index < pageCount; index++) {\n        page = index + 1;\n\n        // If the page index is lower than the margin defined,\n        // the page has to be displayed on the left side of\n        // the pagination.\n        if (page <= marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is greater than the page count\n        // minus the margin defined, the page has to be\n        // displayed on the right side of the pagination.\n        if (page > pageCount - marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is near the selected page index\n        // and inside the defined range (pageRangeDisplayed)\n        // we have to display it (it will create the center\n        // part of the pagination).\n        if (index >= selected - leftSide && index <= selected + rightSide) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index doesn't meet any of the conditions above,\n        // we check if the last item of the current \"items\" array\n        // is a break element. If not, we add a break element, else,\n        // we do nothing (because we don't want to display the page).\n        if (breakLabel && items[items.length - 1] !== breakView) {\n          breakView = (\n            <BreakView\n              key={index}\n              breakLabel={breakLabel}\n              breakClassName={breakClassName}\n              breakLinkClassName={breakLinkClassName}\n              href={this.hrefBuilder(\n                selected < index\n                  ? this.getForwardJump()\n                  : this.getBackwardJump()\n              )}\n              as={this.asBuilder(\n                selected < index\n                  ? this.getForwardJump()\n                  : this.getBackwardJump()\n              )}\n            />\n          );\n          items.push(breakView);\n        }\n      }\n    }\n\n    return items;\n  };\n\n  render() {\n    const {\n      disabledClassName,\n      previousClassName,\n      nextClassName,\n      pageCount,\n      containerClassName,\n      previousLinkClassName,\n      previousLabel,\n      nextLinkClassName,\n      nextLabel,\n    } = this.props;\n\n    const { selected } = this.state;\n\n    const isPreviousDisabled = selected === 0;\n    const isNextDisabled = selected === pageCount - 1 || pageCount <= 0;\n\n    const previousClasses =\n      previousClassName + (isPreviousDisabled ? ` ${disabledClassName}` : '');\n    const nextClasses =\n      nextClassName +\n      (selected === isNextDisabled ? ` ${disabledClassName}` : '');\n\n    const previousAriaDisabled = isPreviousDisabled ? 'true' : 'false';\n    const nextAriaDisabled = isNextDisabled ? 'true' : 'false';\n\n    let prevHref = this.hrefBuilder(selected > 0 ? selected - 1 : selected);\n    let prevAs = this.asBuilder(selected > 0 ? selected - 1 : selected);\n    let nextHref = this.hrefBuilder(\n      selected < pageCount - 1 ? selected + 1 : selected\n    );\n    let nextAs = this.asBuilder(\n      selected < pageCount - 1 ? selected + 1 : selected\n    );\n    return (\n      <ul className={containerClassName}>\n        <li className={previousClasses}>\n          {prevHref.length ? (\n            <Link href={prevHref} as={prevAs}>\n              <a\n                className={previousLinkClassName}\n                tabIndex=\"0\"\n                role=\"button\"\n                aria-disabled={previousAriaDisabled}\n              >\n                {previousLabel}\n              </a>\n            </Link>\n          ) : (\n            <span\n              className={previousLinkClassName}\n              tabIndex=\"0\"\n              role=\"button\"\n              aria-disabled={previousAriaDisabled}\n            >\n              {previousLabel}\n            </span>\n          )}\n        </li>\n\n        {this.pagination()}\n\n        <li className={nextClasses}>\n          {nextHref.length ? (\n            <Link href={nextHref} as={nextAs}>\n              <a\n                className={nextLinkClassName}\n                tabIndex=\"0\"\n                role=\"button\"\n                aria-disabled={nextAriaDisabled}\n              >\n                {nextLabel}\n              </a>\n            </Link>\n          ) : (\n            <span\n              className={nextLinkClassName}\n              tabIndex=\"0\"\n              role=\"button\"\n              aria-disabled={nextAriaDisabled}\n            >\n              {nextLabel}\n            </span>\n          )}\n        </li>\n      </ul>\n    );\n  }\n}\n"]}